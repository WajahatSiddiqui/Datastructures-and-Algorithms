
/**
 * Binary Search Tree
 * @author WajahatSiddiqui (wajahat.siddiqui22@gmail.com)
 *
 */
public class BST {

	private static class TreeNode {
		int data;
		TreeNode left, right;
		public TreeNode (int data) {
			this.data = data;
			left = null;
			right = null;
		}
	}
	
	public static TreeNode insert(TreeNode root, int data) {
		TreeNode node = new TreeNode(data);
		if (root == null) return node;
		else if (data < root.data)
			root.left = insert(root.left, data);
		else
			root.right = insert(root.right, data);
		return root;
	}

	public static TreeNode search(TreeNode root, int key) {
		if (root == null) return null;
		if (key == root.data) return root;
		else if (key < root.data)
			return search(root.left, key);
		else
			return search(root.right, key);
	}

	public static void inorder(TreeNode root) {
		if (root == null) return;
		inorder(root.left);
		System.out.print(root.data + " ");
		inorder(root.right);;
	}
	
	public static int height(TreeNode root) {
		if (root == null) return 0;
		int lh = height(root.left);
		int rh = height(root.right);
		return 1 + Math.max(lh,  rh);
	}
	
	public static int size(TreeNode root) {
		if (root == null) return 0;
		int ls = size(root.left);
		int rs = size(root.right);
		return 1+ls+rs;
	}

	public static void main(String args[]) {
		/*TreeNode tree = new TreeNode(20);
		tree.left = new TreeNode(10);
		tree.right = new TreeNode(30);
		tree.left.left = new TreeNode(5);
		tree.left.right = new TreeNode(12);
		tree.right.left = new TreeNode(15);
		tree.right.right = new TreeNode(40);*/
		TreeNode root = null;
		root = insert(root, 20);
		root = insert(root, 10);
		root = insert(root, 30);
		root = insert(root, 5);
		root = insert(root, 12);
		root = insert(root, 15);
		root = insert(root, 40);
		System.out.println("Insert: ");
		inorder(root);
		int key = 5;
		TreeNode search = search(root, key);
		System.out.println("\nSearch:");
		if (search != null) {
			System.out.println("Found " + key + " search key = " + search.data);
		} else {
			System.out.println(key+" not found");
		}
		System.out.println("Size = " + size(root));
		System.out.println("Height = " + height(root));
	}

}
